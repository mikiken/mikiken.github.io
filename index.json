[{"categories":null,"content":"卒業研究で、OSSの論理合成ツールであるYosysを少し触ったので、そのときに書いたメモを放流 (基本的に他の人が読むことを想定して書いてないので、内容はかなり適当) ","date":"2025-02-09","objectID":"/posts/yosys-intro/:0:0","tags":null,"title":"Yosysを触ってみる","uri":"/posts/yosys-intro/"},{"categories":null,"content":"Yosysのドキュメントを読んでみる チュートリアルなどドキュメントは、この辺にまとまってるっぽい ","date":"2025-02-09","objectID":"/posts/yosys-intro/:1:0","tags":null,"title":"Yosysを触ってみる","uri":"/posts/yosys-intro/"},{"categories":null,"content":"合成を試す (Synthesis starter) Synthesis starter - YosysHQ Yosys 0.41-dev documentation このページでは、パッケージ化された iCE40 FPGA 合成スクリプト synth_ice40 のウォークスルーをガイドします。簡単なデザインを各ステップを通して、呼び出されるコマンドと、それらがデザインに与える影響について見ていきます。synth_ice40 は iCE40 プラットフォーム固有のものですが、これから説明する操作のほとんどは、FPGA 合成スクリプトの大部分で共通です。したがって、本書は、実際に使用されるアーキテクチャに関係なく、Yosysにおける合成がどのように実行されるかについて、基礎的な理解を深めるのに役立ちます。 ","date":"2025-02-09","objectID":"/posts/yosys-intro/:2:0","tags":null,"title":"Yosysを触ってみる","uri":"/posts/yosys-intro/"},{"categories":null,"content":"サンプルの回路 (Demo design) こういうVerilogのコードで試すらしい // address generator/counter module addr_gen #( parameter MAX_DATA=256, localparam AWIDTH = $clog2(MAX_DATA) ) ( input en, clk, rst, output reg [AWIDTH-1:0] addr ); initial addr \u003c= 0; // async reset // increment address when enabled always @(posedge clk or posedge rst) if (rst) addr \u003c= 0; else if (en) begin if (addr == MAX_DATA-1) addr \u003c= 0; else addr \u003c= addr + 1; end endmodule //addr_gen // Define our top level fifo entity module fifo #( parameter MAX_DATA=256, localparam AWIDTH = $clog2(MAX_DATA) ) ( input wen, ren, clk, rst, input [7:0] wdata, output reg [7:0] rdata, output reg [AWIDTH:0] count ); // fifo storage // sync read before write wire [AWIDTH-1:0] waddr, raddr; reg [7:0] data [MAX_DATA-1:0]; always @(posedge clk) begin if (wen) data[waddr] \u003c= wdata; rdata \u003c= data[raddr]; end // storage // addr_gen for both write and read addresses addr_gen #(.MAX_DATA(MAX_DATA)) fifo_writer ( .en (wen), .clk (clk), .rst (rst), .addr (waddr) ); addr_gen #(.MAX_DATA(MAX_DATA)) fifo_reader ( .en (ren), .clk (clk), .rst (rst), .addr (raddr) ); // status signals initial count \u003c= 0; always @(posedge clk or posedge rst) begin if (rst) count \u003c= 0; else if (wen \u0026\u0026 !ren) count \u003c= count + 1; else if (ren \u0026\u0026 !wen) count \u003c= count - 1; end endmodule FIFO(キュー)を表現するモジュールで、雑に図にするとこんな感じか? ","date":"2025-02-09","objectID":"/posts/yosys-intro/:2:1","tags":null,"title":"Yosysを触ってみる","uri":"/posts/yosys-intro/"},{"categories":null,"content":"回路を読み込ませる (Loading the design) YosysをインストールしてPATHが通った状態で、以下のコマンドを打つ $ yosys fifo.v -- Parsing `fifo.v' using frontend ` -vlog2k' -- 1. Executing Verilog-2005 frontend: fifo.v Parsing Verilog input from `fifo.v' to AST representation. Storing AST representation for module `$abstract\\addr_gen'. Storing AST representation for module `$abstract\\fifo'. Successfully finished Verilog frontend. VerilogのコードがASTの表現に変換される Verilog FrontendがVerilogのコードをASTに変換する 詳細は以下を参照 The Verilog and AST frontends - YosysHQ Yosys 0.41-dev documentation ","date":"2025-02-09","objectID":"/posts/yosys-intro/:2:2","tags":null,"title":"Yosysを触ってみる","uri":"/posts/yosys-intro/"},{"categories":null,"content":"合成する (Elaboration) synth_ice40 -top fifo というコマンドを打つと、内部で最適化とかFPGA(ここではiCE40)に対するテクノロジマッピングの処理とかを行うスクリプトが実行される。 スクリプトの中で、実際どういうコマンドが走るかは以下を見ると確認できる synth_ice40 - synthesis for iCE40 FPGAs - YosysHQ Yosys 0.41-dev documentation スクリプトの最初の begin sectionで実行されるコマンド read_verilog -D ICE40_HX -lib -specify+/ice40/cells_sim.v hierarchy -check -top \u003ctop\u003e proc read_verilog -D ICE40_HX -lib -specify +/ice40/cells_sim.v は iCE40 セル・モデルをロードし、プラットフォーム固有の IP ブロックをデザインに含めることができます。PLL はこの一般的な例で、後でマッピング・パスに頼るのではなく、SB_PLL40_CORE を直接参照する必要があるかもしれません。今回のシンプルなデザインではこれらのIPブロックを使用しないため、このコマンドは省略できます。ハードウェアへのマッピングを開始すると、これらのセル・モデルも必要になるため、後でロードする必要があります。 後ろにいろいろ書いてあるのは、iCE40で使えるIPブロックを読み込ませるためのオプションのよう 今回はIPを特に使わないので、別になくてもいいっぽい(?) +/ は、Yosys共有ディレクトリへの動的参照です。デフォルトでは /usr/local/share/yosys です。ソースディレクトリからローカルにビルドされたバージョンのYosysを使用する場合、これは同じディレクトリ内の共有フォルダになります。 今回は、synth_ice40 の中で走ってるコマンドを一つずつ手で打って実行することで、何が起きているのかを把握する（そして、このFPGA向けの論理合成に留まらない一般的なYosysの合成のフローを理解する）。 ","date":"2025-02-09","objectID":"/posts/yosys-intro/:2:3","tags":null,"title":"Yosysを触ってみる","uri":"/posts/yosys-intro/"},{"categories":null,"content":"addr_gen モジュール (The addr_gen module) // address generator/counter module addr_gen #( parameter MAX_DATA=256, localparam AWIDTH = $clog2(MAX_DATA) ) ( input en, clk, rst, output reg [AWIDTH-1:0] addr ); initial addr \u003c= 0; // async reset // increment address when enabled always @(posedge clk or posedge rst) if (rst) addr \u003c= 0; else if (en) begin if (addr == MAX_DATA-1) addr \u003c= 0; else addr \u003c= addr + 1; end endmodule //addr_gen hierarchy -top addr_gen というコマンドを打つと、addr_gen をトップレベルのモジュールとして宣言できる。そのため、module fifo とかは無視される。 hierachy コマンドは、回路を読み込ませた後、一番最初に実行する必要がある 後に続くコマンドが、どのモジュールをトップレベルとして処理するかを知る必要があるため yosys\u003e hierarchy -top addr_gen 2. Executing HIERARCHY pass (managing design hierarchy). 3. Executing AST frontend in derive mode using pre-parsed AST for module `\\addr_gen'. Generating RTLIL representation for module `\\addr_gen'. 3.1. Analyzing design hierarchy.. Top module: \\addr_gen 3.2. Analyzing design hierarchy.. Top module: \\addr_gen Removing unused module `$abstract\\fifo'. Removing unused module `$abstract\\addr_gen'. Removed 2 unused modules. addr_gen モジュールをYosysに読み込ませて、ブロック図として表示するとこうなる 上記のVerilogの always @ に含まれている addr \u003c= addr + 1 や addr == MAX_DATA - 1 といった単純なロジックは、それぞれ $eq とか $add というブロックとして表現されている if .. else のような条件分岐や、モジュール内部のメモリ要素などは PROC (process)というブロックによって表現されている PROC ブロックの2行目は、このブロックが元のVerilogのソースコードのどの位置に対応しているかを表す 例えば、上図の PROC $1 の場合、fifo.v:12.2-20:6 なので、以下の部分に対応する always @(posedge clk or posedge rst) if (rst) addr \u003c= 0; else if (en) begin if (addr == MAX_DATA-1) addr \u003c= 0; else addr \u003c= addr + 1; end 左上の PROC $4 は初期プロセスというらしい 処理のエントリーポイントを表すみたいな理解でいいのかな proc コマンドを打つと、PROC ブロックをネットリストに変換することができる このコマンドは、複数のコマンドからなるマクロである (先述の synth_ice40 とかと同じ) 動作レベルの記述をマルチプレクサやレジスタなどに変換するサブコマンドが実行される ターミナルに色々表示されてるはず 実際どのような処理が行われるかは以下を参照 Converting process blocks - YosysHQ Yosys 0.41-dev documentation 回路が最適化されるのを防ぐため、proc -noopt として実行する addr_gen モジュールに対して、proc -noopt を実行した結果をブロック図として表示したもの この図を見ると、PROC がもう少し具体的なブロックとして表現されていることが確認できる 例えば if 文は、マルチプレクサのブロック $mux として表現されている レジスタは、$adff (Asynchronous D-Flip-Flop)ブロックによって表現されている 左上に addr[7:0] を 8’00000000 で初期化するブロックがあるが、これは他のブロックから独立して存在しており、回路として合成できない そこで、実際に回路として合成する前に clean コマンドを実行して、このようなfloating wireを削除する必要がある opt_expr コマンドを実行する 定数の入力を持つ内部のブロックに対して、定数の畳み込みを行ったり、簡単な式(expr)の書き換えを行ったりするらしい opt_expr - perform const folding and simple expression rewriting - YosysHQ Yosys 0.41-dev documentation 通常、opt_expr は proc の最後で呼び出す なお、複数のコマンドを打つときは、opt_expr; clean のようにセミコロンとスペースで区切ることで、まとめて呼び出すことができる opt_expr; clean の実行後に、addr_gen モジュールをブロック図として表示したもの 1つ上の図と比較すると、$2 $eq の定数入力が 255 から 8’00000000 になっていることが確認できる。これは、opt_expr を実行したことで、定数入力が32bitから8bitに縮小されたことによる。 最適化パス(Optimization pass)でどのような処理が行われているかは、以下を参照 Optimization passes - YosysHQ Yosys 0.41-dev documentation あるコマンドの実行後に opt_expr; clean のように明示的に clean コマンドを呼び出す代わりに、opt_expr;; のようにコマンドの後ろにセミコロンを2つ重ねて書くことで、暗黙的に clean コマンドが実行される clean コマンドを実行することで、他のブロックに接続されずに残っている不必要なブロックを削除することができるため、後に続くコマンドでの処理を削減できる場合がある。 ","date":"2025-02-09","objectID":"/posts/yosys-intro/:2:4","tags":null,"title":"Yosysを触ってみる","uri":"/posts/yosys-intro/"},{"categories":null,"content":"fifo モジュール全体 (The full example) hierarchy -check -top fifo を打つ トップモジュールを module fifo に設定 -check オプションをつけると、実装が与えられていないモジュールが含まれている場合にエラーを返す（未解決シンボルみたいな感じでは扱えなくなる） 現状、addr_gen をトップレベルモジュールに設定しているので、以下のコマンドを打つことで、回路を読み込み直す（もちろんYosysのシェル自体を再起動してもよい） yosys\u003e design -reset yosys\u003e read_verilog fifo.v 11. Executing Verilog-2005 frontend: fifo.v Parsing Verilog input from `fifo.v' to AST representation. Generating RTLIL representation for module `\\addr_gen'. Generating RTLIL representation for module `\\fifo'. Successfully finished Verilog frontend. yosys\u003e hierarchy -check -top fifo 12. Executing HIERARCHY pass (managing design hierarchy). 12.1. Analyzing design hierarchy.. Top module: \\fifo Used module: \\addr_gen Parameter \\MAX_DATA = 256 12.2. Executing AST frontend in derive mode using pre-parsed AST for module `\\addr_gen'. Parameter \\MAX_DATA = 256 Generating RTLIL representation for module `$paramod\\addr_gen\\MAX_DATA=s32'00000000000000000000000100000000'. Parameter \\MAX_DATA = 256 Found cached RTLIL representation for module `$paramod\\addr_gen\\MAX_DATA=s32'00000000000000000000000100000000'. 12.3. Analyzing design hierarchy.. Top module: \\fifo Used module: $paramod\\addr_gen\\MAX_DATA=s32'00000000000000000000000100000000 12.4. Analyzing design hierarchy.. Top module: \\fifo Used module: $paramod\\addr_gen\\MAX_DATA=s32'00000000000000000000000100000000 Removing unused module `\\addr_gen'. Removed 1 unused modules. addr_gen を読み込んだときと異なり、$abstract モジュールが表示されていない これは、read_verilog -defer fifo.v のように -defer オプションを渡したから -defer オプション read_verilog にASTだけを読み込んで、実際のコンパイルを後の hierarchy コマンドに延期するように指示します。これは、モジュールのデフォルトパラメータが合成不可能な無効なコードを生成する場合に便利です。これが、Yosysがコンパイルを自動的に延期する理由であり、デザインをロードした後、常に hierarchy コマンドを最初に実行すべき理由の1つです。このような問題が発生しないことがわかっている場合は、-defer を省略できます。 hierarchyコマンドが何をしているか、後でこれを読む hierarchy - check, expand and clean up design hierarchy - YosysHQ Yosys 0.41-dev documentation 先ほどと同様にproc コマンドを実行して、begin sectionを終わらせる 回路規模が大きいので、rdataの出力のデータパスだけ図示すると以下のようになる 回路全体を図示したい場合、show fifo のように打てばOK ハイライトされた fifo_reader ブロックは、addr_gen のインスタンスを表している proc -noopt を実行した後の状態になっている 型は $paramod\\\\addr_gen\\\\MAX_DATA=s32'00000000000000000000000000000000 $paramod はパラメトリックモジュールを表し、MAX_DATA パラメータが指定された値に設定された addr_gen モジュールのインスタンスを表す もう一方のハイライトされてる $memrd ブロックは、Verilogの data という変数に対応してそう? どのようなタイプのメモリとして実装されるかは、合成のこの段階では分からない ここで $memrd は非同期で、clockとenableが未定義になっている（1’x になっている） もう1つのハイライトされたブロックは $memrd セルである。合成のこの段階では、どのようなタイプのメモリが実装されるかはまだわからないが、rdata \u003c= data[raddr]; がメモリからの読み出しとして実装される可能性があることはわかっている。ここでの $memrd セルは非同期であり、クロックとイネーブル信号の両方が未定義であることに注意してください。 ","date":"2025-02-09","objectID":"/posts/yosys-intro/:2:5","tags":null,"title":"Yosysを触ってみる","uri":"/posts/yosys-intro/"},{"categories":null,"content":"平坦化 (Flattening) 平坦化(Flattening)を行うことで、あるモジュールがサブモジュールを内包するという階層構造が解消される。このことによって、モジュール間にまたがる最適化を行えるようになる。 モジュールが具体的な実装に置換されるっぽい flatten - flatten design - YosysHQ Yosys 0.41-dev documentation yosys\u003e flatten 15. Executing FLATTEN pass (flatten design). Deleting now unused module $paramod\\addr_gen\\MAX_DATA=s32'00000000000000000000000100000000. yosys\u003e clean Removed 3 unused cells and 25 unused wires. flatten;; (上記の2コマンドを打ったのと等価)を実行後に、 rdata の出力のデータパスを図示した様子 ブロックの位置関係は多少変わっているが、 1つ上の図の fifo_reader というインスタンスが、proc -noopt を実行した後の addr_gen モジュールの具体的な実装に置き換えられている addr という出力が、fifo_reader.addr という名前に変わり、1つ上の図の、$memrd の $raddr という入力（ワイヤー）に置き換えられている ことが確認できる。 なお、ワイヤーのマージは clean コマンドのpassの中で行われる。 flatten;; した後の出力を見ると確認できる また、場合によっては、この段階で tribuf や deminout といったコマンドを実行し、合成対象のアーキテクチャに適した論理ブロックへの変換を行う。 tribuf は、0, 1, Z (ハイインピーダンス) の3値を入力にもつ $mux をトライステートバッファに変換するらしい（あんまりよく理解できてない） $mux multiplexer $mul multiplier ","date":"2025-02-09","objectID":"/posts/yosys-intro/:2:6","tags":null,"title":"Yosysを触ってみる","uri":"/posts/yosys-intro/"},{"categories":null,"content":"テクノロジマッピング Yosysのテクノロジマッピング : FPGA向きのテクノロジマッピングがメインっぽい? abcをyosysの中で呼ぶこともできる 遅延とかのパラメータを考慮してテクノロジマッピングしたい場合は、こちらを使った方が良さそう? abc [options] [selection] This pass uses the ABC tool [1] for technology mapping of yosys’s internal gate library to a target architecture. ","date":"2025-02-09","objectID":"/posts/yosys-intro/:3:0","tags":null,"title":"Yosysを触ってみる","uri":"/posts/yosys-intro/"},{"categories":null,"content":"その他 等価性判定 Yosysにも等価性判定する機能あるっぽい? 最適化とか平坦化といった処理はやらない方がいい? Yosysで出力したJSONからネットリストのSVGを出力してくれるツール aigmap コマンド and-inverter-graphにマッピングする https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/aigmap.html splitnets コマンド 複数bit幅をもつwireを複数本の1bitのwireに変換する https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/splitnets.html clean コマンド (実質的に未使用の)冗長なcellやwireを削除 https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/clean.html ","date":"2025-02-09","objectID":"/posts/yosys-intro/:4:0","tags":null,"title":"Yosysを触ってみる","uri":"/posts/yosys-intro/"},{"categories":null,"content":"去年と同様、今年何をしてたかをざっくり振り返ります。 ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:0","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"1月 研究室に(仮)配属されてゼミ発表の準備に気を取られていたら、某授業の成績に占めるウエイトの大きい課題を吹き飛ばして絶望するなどしていた (試験頑張ってなんとか単位は確保した) 忄青幸𠬝亻云辶关 のレポート出し忘れてることに気づき、顔無くなった — mikiken (@mikikeen) January 18, 2024 学校の実験で、ライフゲームをマトリクスLEDに表示する謎デバイスを作っていた 大学の実験でライフゲームをマトリクスLEDに表示するやつ作った pic.twitter.com/61hdEif0HU — mikiken (@mikikeen) January 29, 2024 アホの量の配線と格闘していた模様 配線の量エグい(これで半分) pic.twitter.com/ogGYMX7lLZ — mikiken (@mikikeen) January 23, 2024 オシロスコープを買った my new gear...!!! pic.twitter.com/za04qEYoNs — mikiken (@mikikeen) January 31, 2024 ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:1","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"2月 RISC-V CPU自作本をやったりしていた パイプラインの実装までやって、Tang Primerという中華FPGAへの実装を試みたところ論理合成がうまくいかなかった様子 FIRRTLが吐いたVerilogを論理合成ツールに突っ込んだらSyntax Error出てて厳しい (bindが使える処理系があまりないようなので、若干書き換える必要があるっぽいが、Verilog力が低すぎて何も分からない😇) pic.twitter.com/du9wk6u08I — mikiken (@mikikeen) February 22, 2024 ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:2","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"3月 情報科学若手の会 春の陣に参加していた 何も発表できず… 情報科学若手の会 春の陣 #wakate2024s を来週日曜日（3/10）に開催します！！ 現在も参加者・発表者を募集しております 皆さまのご参加をお待ちしております！！！https://t.co/qSt5hr1kO8 — 情報科学若手の会 (@is_wakate) March 3, 2024 MLIRに入門し(ようとしてい)た MLIRはLLVM Projectの一部として開発が行われているプロジェクトで、中間表現(IR:Intermediate Representation)を定義したり、 IR間の変換等を実装するためのフレームワークのようなもの 公式でTutorialが用意されているので、それをやっていた LLVMをビルドするためにCMakeを使う必要があるが、CMakeLists.txtの書き方が分からず、エラーと格闘しながら2-3週間溶かしていた気がする 放置しているので時間を見つけて続きをやりたい ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:3","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"4月 年度が変わり、研究室に正式に配属された 研究室の発表2回目 このあたりから生活に占める研究のウエイトが大きくなり、趣味開発にあまり時間を割けなくなっている ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:4","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"5月 研究室で六甲縦走のコースの一部を実際に歩いてみる謎イベントが開催されたので参加した ベル麻痺を発症し、顔の左半分の筋肉が動かなくなった 個人的に今年で一番影響が大きかった 日常生活がままならないうえに、精神的ダメージもそこそこデカかった 朝起きたら、顔の左半分の筋肉に力入らなくなってたんだけど、何科を受診すべきなんやろ — mikiken (@mikikeen) May 14, 2024 ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:5","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"6月 研究室の発表3回目 このあたりから研究の方向性が迷走し始めている(?) 実装にRustを使うことにしたので、Rustに入門していた とりあえずこういうのが動くようになった https://t.co/wTH9bykWoE pic.twitter.com/SOjkpUdvhf — mikiken (@mikikeen) June 24, 2024 顔ぶっ壊れて精神が割と死んでたので、研究サボってKiCadで基板引いて遊んだりしていた 院試が近づいてきたので、複素関数論とか常微分方程式とかをn年振りに思い出していた ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:6","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"7月 院試勉強の記憶しかない 電気回路とか電子回路とか情報理論などをn年振りに思い出していた ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:7","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"8月 院試勉強の記憶しかない2 院試を受けた(8/22, 8/23) ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:8","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"9月 院試に一応受かっていた 院から所属研究室が変わることになった 機械学習系の研究室 個人的には、今の所属研究室と2択で悩んだ研究室へ配属されることになったので割と嬉しい 研究室ES5になったっぽい https://t.co/LYRD81XudF — mikiken (@mikikeen) September 6, 2024 第57回 情報科学若手の会に参加した 幹事としては初の参加 直後に研究室の発表が控えていたので、夜中4時前くらいまでその原稿を書いたりしていて、ヘロヘロになっていた ありがとうございました！#wakate2024 pic.twitter.com/661b2DVSCx — mikiken (@mikikeen) September 16, 2024 研究室の発表4回目 第2種電気工事士の筆記試験を受けた done、多分受かってるはず https://t.co/fxmllsTZ4i — mikiken (@mikikeen) September 30, 2024 ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:9","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"10月 千葉県浦安市の某テーマパークに初めて行った ヤフオクで買ったジャンクのLet’s noteの基板にProxmoxを入れて遊んでいた 今見返したらめっちゃtypoしてておもろい (基板なしじゃなくて基板のみ) https://t.co/uu1x9lHQA5 — mikiken (@mikikeen) October 13, 2024 Zennの記事が謎に伸びて一瞬トップページに載ってた ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:10","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"11月 CAMPHOR-でSYCLにデータ並列プログラミング入門するイベントに参加した 研究室の中間発表が近づいているにも関わらず実装のコードがバグり散らかしていて、進捗が生まれず焦りを感じていた 今日も一日 pic.twitter.com/dSl3ZYL6a6 — mikiken (@mikikeen) October 30, 2024 電気工事士の実技試験の練習をしていた 電気工事士の実技試験の練習をした pic.twitter.com/LteUKETqT5 — mikiken (@mikikeen) November 17, 2024 ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:11","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"12月 電気工事士の実技試験を受けた(12/14) CAMPHOR- でPFNのMN-Coreの話を聞けるイベントに参加した 突如始まるMN-Core Challenge ライブコーディング編#camphor_pfn pic.twitter.com/DOi2lb67aw — mikiken (@mikikeen) December 14, 2024 研究室の中間発表 ブラックフライデーセールで3Dプリンタを買った ブラックフライデーセールで買ってたCreality K1 (3Dプリンタ) をようやく触っている pic.twitter.com/ph5LeQlRVa — mikiken (@mikikeen) December 21, 2024 自転車のロックのつまみが壊れてたので、モデリングの練習がてら作ってみた (モデリングからプリントまで30分弱でできた、印刷速くてすごい) pic.twitter.com/82oFZ40LNi — mikiken (@mikikeen) December 21, 2024 卒論を書き始めた(現在進行系) 丸一日格闘した結果、大体いい感じになった あとは中身を書くだけ() https://t.co/ZN7LPTA90F — mikiken (@mikikeen) December 27, 2024 ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:12","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"昨年の目標を見返す 昨年の記事で書いていた目標を見てみると、以下の内容を書いていたっぽい。 自作CPU FPGAへの実装は未完だが、一応達成している 本の写経メインだったことに加え、Chiselで実装したので、あまり頭に残ってない System VerilogかVerylあたりでもう一回やってみたい KiCadで基板作ってみたい 自作キーボードの基板を設計したりした 設計の途中まではやった 完成させて、業者に発注するところがまだ SecHackとか未踏とか、規模大きめのプログラムを長期で作るやつをやってみたい これは全然できてない やってみたいアイデアは一応あるので、なんとか企画書に書いて出したいところ 院試に通る これは完全に達成している ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:13","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"感想 今年は、体調を大きく崩したり、院試があったり、生活に占める研究のウエイトが大きくなったりで、目の前のことをこなすだけで割と精一杯だった感じがある。 来年は心身の体調に気をつけつつ、最低限+αの活動もやっていきたい。 ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:14","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"来年何をしたいか 今パッと思いついたことを書き連ねておくと、 心身の健康を保つ 未踏に応募したい 機械学習の研究動向をある程度キャッチアップしたい 来年配属予定の研究室が機械学習系なので 情報科学若手の会で登壇したい 趣味開発にもう少し時間を割けるようにしたい 就活に向け、インターンに積極的に参加していきたい あたりかなぁ。（適宜更新するかも） ","date":"2024-12-31","objectID":"/posts/2024-looking-back/:0:15","tags":null,"title":"2024年を雑に振り返る","uri":"/posts/2024-looking-back/"},{"categories":null,"content":"TL;DR 5月にベル麻痺になり、顔の左半分が動かせなくなった 目が閉じないことと、口元がうまく動かせないのが辛い 8月末になって、ほぼ治った ","date":"2024-05-15","objectID":"/posts/bell-palsy/:1:0","tags":null,"title":"ベル麻痺で顔の左半分が動かなくなったので症状の経過をメモする","uri":"/posts/bell-palsy/"},{"categories":null,"content":"症状の経過 ","date":"2024-05-15","objectID":"/posts/bell-palsy/:2:0","tags":null,"title":"ベル麻痺で顔の左半分が動かなくなったので症状の経過をメモする","uri":"/posts/bell-palsy/"},{"categories":null,"content":"5/12(日) (発症2日前) 夕飯を食べてるとき、舌の左側だけ、味をあまり感じない気がした 家の雨戸を閉めるときに、その音が左耳だけに響く感じがした ","date":"2024-05-15","objectID":"/posts/bell-palsy/:2:1","tags":null,"title":"ベル麻痺で顔の左半分が動かなくなったので症状の経過をメモする","uri":"/posts/bell-palsy/"},{"categories":null,"content":"5/13(月) (発症前日) 研究室から帰ろうとしたら、いつもより怠さを感じた 普段なら新快速に乗って帰るけど、絶対に座りたかったので快速で帰った 帰宅の途中くらいから、左耳の後ろ辺りに何かに圧迫されている感じの痛みがあった ","date":"2024-05-15","objectID":"/posts/bell-palsy/:2:2","tags":null,"title":"ベル麻痺で顔の左半分が動かなくなったので症状の経過をメモする","uri":"/posts/bell-palsy/"},{"categories":null,"content":"5/14(火) (発症当日) 朝起きたら、顔の左半分が全く動かないことに気づく 瞬きが一切できない 口をうまく閉じられないので、口から水がこぼれる この症状、何科を受診すべきなんや 朝起きたら、顔の左半分の筋肉に力入らなくなってたんだけど、何科を受診すべきなんやろ — mikiken (@mikikeen) May 14, 2024 かかりつけ医に電話し、近くの脳神経外科がある総合病院の受診を勧められたので、そこに行くことに 病院で脳のMRIを撮ってもらった 症状を説明したら、ベル麻痺の可能性が高いと言われた 脳神経外科を受診した結果、ベル麻痺とかいうやつらしい (薬飲んでたら治るらしい)https://t.co/9pRw63aaeN https://t.co/1P1fhjeVvr — mikiken (@mikikeen) May 14, 2024 耳の後ろに通ってる神経の周辺が炎症を起こして、腫れることで、神経の伝達が阻害されるらしい？ ","date":"2024-05-15","objectID":"/posts/bell-palsy/:2:3","tags":null,"title":"ベル麻痺で顔の左半分が動かなくなったので症状の経過をメモする","uri":"/posts/bell-palsy/"},{"categories":null,"content":"その後の経過 1週間後くらい 大体1週間経ったので症状のメモ ・左瞼は、半分くらいは閉まるようになった ・口元も多少動くようになった ・舌の左半分の味覚が、体感1~2割くらい復活した — mikiken (@mikikeen) May 22, 2024 2週間後くらい 味覚が少し復活（3割くらい？） 瞼が半分くらい閉じるようになった 3週間後くらい 頑張ればうがいができる 1ヶ月後くらい 味覚はほぼ復活 ようやくストローなしでコップから飲めるようになった 瞼の閉じ具合は、あまり変化なし 1ヶ月の経過 ・味覚はほぼ復活した ・口元が大分動くようになった(コップで水が飲める程度には) ・左瞼は体感6割くらい閉まるようになった みたいな感じか — mikiken (@mikikeen) June 19, 2024 2ヶ月後くらい 口元が、大分動かせるようになってきた 瞼はまだ半分程度しか閉じられない 7月3週目くらい 瞼が8割くらい閉じられるようになってきた ウインクはまだできない 目の乾燥が原因で結膜炎になって、左目がめっちゃ痒い 顔の左の外周らへんが動かしにくい 8月2週目くらい 耳の聞こえ方が変 音の高さが低く聞こえる 分かりにくい例えだが、調律の狂ったピアノに雑音が混じる感じに似た聞こえ方 8月末くらい 目がほぼ完全に閉じられるようになった 口元も概ね自由に動かせるようになった とはいえ、まだ左の口角が上がりにくい ","date":"2024-05-15","objectID":"/posts/bell-palsy/:2:4","tags":null,"title":"ベル麻痺で顔の左半分が動かなくなったので症状の経過をメモする","uri":"/posts/bell-palsy/"},{"categories":null,"content":"症状がひどいときにしていた対策 飲み物をこぼしてしまうので、ストローで飲むようにしてた 入浴時に、目が閉じられずシャンプーが目に入るので、水泳用のゴーグルを装着していた 就寝時、目が傷つかないように眼帯をし、その上からアイマスクをして寝てた 瞬きができず目が乾燥するので、点眼薬（ソフトサンティア）を買って、目の乾きを感じたときに点眼するようにしてた ","date":"2024-05-15","objectID":"/posts/bell-palsy/:3:0","tags":null,"title":"ベル麻痺で顔の左半分が動かなくなったので症状の経過をメモする","uri":"/posts/bell-palsy/"},{"categories":null,"content":"概要 ライフゲームのシミュレーションの様子をマトリクスLEDに表示するデバイスを作った ブラウザから、初期パターンの設定とシミュレーションの開始・リセットができる 大学の実験でライフゲームをマトリクスLEDに表示するやつ作った pic.twitter.com/61hdEif0HU — mikiken (@mikikeen) January 29, 2024 ","date":"2024-02-14","objectID":"/posts/lifegame-indicator/:0:1","tags":null,"title":"ライフゲームのシミュレーションの様子をマトリクスLEDに表示するデバイスを作った","uri":"/posts/lifegame-indicator/"},{"categories":null,"content":"ライフゲームとは ライフゲームは、生命の誕生・進化・淘汰のプロセスをシミュレーションする簡易な数理モデルです。ライフゲームでは、まず格子状のフィールドに生きたセルを配置しておきます。次に、以下のようなルールに従って、次の世代のセルの配置を決定します。あとは同様のルールに従い、次の世代のセルの配置を繰り返し算出し、生命の進化をシミュレートしていきます。 誕生 死んでいるセルに隣接する生きたセルがちょうど3つあれば、次の世代が誕生する。 生存 生きているセルに隣接する生きたセルが2つか3つならば、次の世代でも生存する。 過疎 生きているセルに隣接する生きたセルが1つ以下ならば、過疎により死滅する。 過密 生きているセルに隣接する生きたセルが4つ以上ならば、過密により死滅する。 Wikipediaより引用 ","date":"2024-02-14","objectID":"/posts/lifegame-indicator/:0:2","tags":null,"title":"ライフゲームのシミュレーションの様子をマトリクスLEDに表示するデバイスを作った","uri":"/posts/lifegame-indicator/"},{"categories":null,"content":"スライド これもTD4の記事と同じで、学校の実験の一環として製作しました。記事を書くのが面倒になってきたので、 そのときのスライドを載せときます。 ","date":"2024-02-14","objectID":"/posts/lifegame-indicator/:0:3","tags":null,"title":"ライフゲームのシミュレーションの様子をマトリクスLEDに表示するデバイスを作った","uri":"/posts/lifegame-indicator/"},{"categories":null,"content":"2023年何をしてたか、後から見返す用に雑に振り返ります。 ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:0","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"1月 自作Cコンパイラのスタックアライン崩れてるバグを倒した 最近自作Cコンパイラ触ってないなあ 早くセルフホストしたいね スタックアライメント崩れてるのが直って、ドーナツ動くようになった pic.twitter.com/BHBzOwpELp — mikiken (@mikikeen) January 2, 2023 ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:1","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"2月 細々とした機能を自作コンパイラに足していたっぽい 配列の初期化式とか 初期化式があるときは配列の要素数を省略できるようにしたhttps://t.co/uFU4yGlrmP — mikiken (@mikikeen) February 16, 2023 文字列リテラルの初期化式を実装https://t.co/0Lzjm1FaNL — mikiken (@mikikeen) February 26, 2023 ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:2","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"3月 セキュリティキャンプフォーラムに行った セキュキャン修了生向けのイベント でした pic.twitter.com/oifxPjiMhc — mikiken (@mikikeen) March 11, 2023 CAMPHOR- の運営メンバーになった CAMPHOR- 自体は、去年の12月くらいから行くようになった 居心地よくて何回か行ってたらぬるっと運営メンバーになってた ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:3","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"4月 自作Cコンパイラに多次元配列を実装 多次元配列を実装https://t.co/TJsDHtkLGj — mikiken (@mikikeen) April 20, 2023 ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:4","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"5月 ひたすら大学の課題に追われてた オンライン時代のノリで授業取りまくったらキャパオーバーした ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:5","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"6月 CAMPHOR- で植山類さんのイベントに参加した 植山さんの講演よかったなぁ 特に、自作Cコンパイラ書いててモヤッと感のあったところの話が聞けて(ある程度)スッキリした (PLT/GOTって何?ってなってた)#camphor_low_layer — mikiken (@mikikeen) June 10, 2023 自作Cコンパイラが壊れた図 今日も一日 pic.twitter.com/8cnjKeDQDv — mikiken (@mikikeen) June 13, 2023 ネストした型の構文解析を実装した ネストした型がパースできるようになったhttps://t.co/uMNRcYAFpn — mikiken (@mikikeen) June 22, 2023 ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:6","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"7月 Twitterが壊れかけてたらしい 万一に備えTwitterの過去ツイートをエクスポートした — mikiken (@mikikeen) July 2, 2023 パソコンのキーが壊れた Ctrlキーなし生活を、開始 pic.twitter.com/tuACDerwXB — mikiken (@mikikeen) July 12, 2023 ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:7","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"8月 このサイトをつくった スマートリモコンつくってた Slackからリモコン操作ができるようになった pic.twitter.com/6wJoxmRqBZ — mikiken (@mikikeen) August 7, 2023 KLab Expert Camp TCP/IPのプロトコルスタックをCで書くという(一応)インターン ネットワーク何もわからんかったので、 TCPのパケットを送れるようになった#KLabExpertCamp pic.twitter.com/cWx7qBQABk — mikiken (@mikikeen) August 30, 2023 ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:8","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"9月 前期の科目の大量落単が発覚😇 Turingのインターン 実務型のインターンは初めてだったので、本当にいい経験をさせてもらえた 今日からTuringでサマーインターンに参加させてもらってる pic.twitter.com/mvXhyn8boS — mikiken (@mikikeen) September 11, 2023 スマートリモコンつくってた2 温度とかのパラメータから信号を生成して、エアコンが制御できるようになった pic.twitter.com/T73BzG2GAO — mikiken (@mikikeen) September 9, 2023 ラズパイでリモコン操作するやつを基板にした、いい感じ pic.twitter.com/cqixu83n9a — mikiken (@mikikeen) September 29, 2023 ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:9","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"10月 情報科学若手の会 (なぜか)来年は幹事をさせていただくことになったので頑張りたい 次行くときは何かしら発表できるようになりたいなあ めちゃくちゃ勉強になった👀 次来るときは、何か発表できるようになりたい (↓は交流イベントでもらった景品)#wakate2023 pic.twitter.com/kB5ol66YG8 — mikiken (@mikikeen) October 9, 2023 セキュリティミニキャンプ徳島に参加した clang-query 初めて使った 着弾 pic.twitter.com/4Z2RB75BnC — mikiken (@mikikeen) October 13, 2023 研究室に仮配属された 集積回路の論理診断とかFPGAとかやってる研究室 ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:10","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"11月 鴨川ハッカソン 鴨川デルタにStarlinkとポータブル電源を設置して屋外でハッカソンをする ぶっ飛んだイベントで滅茶苦茶楽しかった #鴨川ハッカソン 無事に2日間終了しました！ 優秀賞はチーム Do'er (@du_doer) とチーム全財産6,478円でした！ 前例のない斬新なイベントでしたが、参加者の皆さまに楽しんでいただけたようで光栄です😆 参加してくださった方々、ご協力いただいた STORES 株式会社の皆さま、ありがとうございました！ pic.twitter.com/nV20Kg2I9Y — CAMPHOR- (@camphor_kyoto) November 5, 2023 TD4をFPGAに実装 思ったより反響があって驚いた 大学の実験で「CPUの創りかた」のTD4をFPGAで実装してみた pic.twitter.com/Oqk6r73JyZ — mikiken (@mikikeen) November 6, 2023 ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:11","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"12月 インターン報告大会 Advent Calendarの記事を量産してた 1000行OS自作本で自作OSに入門してた ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:12","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"感想 今年の前半は結構自作Cコンパイラをやってたっぽい。夏くらいは、スマートリモコンとかインターンとかで、ハードウェア寄りのことをやってた。後半は、このサイトを作ったり、CAMPHOR- で動かしてるサービスを少し触ったりするようになり、結構幅広いレイヤの技術に触れられて楽しかったです。 あと、夏休みにインターンを経験できたのは、かなり有意義だったと思います。 ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:13","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"来年何をしたいか やってみたいことの粒度がかなりバラバラですが、 自作CPU KiCadで基板作ってみたい SecHackとか未踏とか、規模大きめのプログラムを長期で作るやつをやってみたい 院試に通る ","date":"2023-12-31","objectID":"/posts/2023-looking-back/:0:14","tags":null,"title":"2023年を雑に振り返る","uri":"/posts/2023-looking-back/"},{"categories":null,"content":"この記事は、CAMPHOR- Advent Calendar 2023 の21日目の記事です。 ","date":"2023-12-21","objectID":"/posts/impl-ogp-image/:0:0","tags":null,"title":"自作サイト用にOGP画像を自動生成するツールを作った","uri":"/posts/impl-ogp-image/"},{"categories":null,"content":"はじめに TwitterとかSlackなどで、URLを貼り付けると、以下のように記事のサムネイルが表示されることがあると思います。 SNS向けに記事のメタ情報を記述するプロトコルとしては、Open Graph protocol というものが広く使われています。 今回は、このサイトにOGPに準拠した記事のサムネイルを自動生成するツール作ってみました。 ","date":"2023-12-21","objectID":"/posts/impl-ogp-image/:1:0","tags":null,"title":"自作サイト用にOGP画像を自動生成するツールを作った","uri":"/posts/impl-ogp-image/"},{"categories":null,"content":"方針 自分しか使わないツールなので、とりあえず以下のような方針で進めることにしました。 サムネイルには、記事のタイトル, ユーザー名, アイコン, サイト名を表示する 記事の.mdファイルのパスを渡すと、Front Matterから記事タイトルを取得して、サムネイルを生成する Hugoと連携させる可能性を一応考え、Goで実装する SVGでサムネイルのテンプレートを用意しておき、そこに記事タイトルを埋め込み、PNGで出力する ","date":"2023-12-21","objectID":"/posts/impl-ogp-image/:2:0","tags":null,"title":"自作サイト用にOGP画像を自動生成するツールを作った","uri":"/posts/impl-ogp-image/"},{"categories":null,"content":"実装してみる ","date":"2023-12-21","objectID":"/posts/impl-ogp-image/:3:0","tags":null,"title":"自作サイト用にOGP画像を自動生成するツールを作った","uri":"/posts/impl-ogp-image/"},{"categories":null,"content":"雛形の用意 まずはサムネイルの雛形を用意します。適当にPowerPointで雛形を作成し、Inkscapeで調整すると以下のような感じになりました。適当に作ったらZennのパクリみたいになってしまった 雛形のSVGファイルをテキストエディタで開き、いろいろ手直しを加えた結果、以下のようになりました。 \u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e \u003csvg width=\"1200\" height=\"630\" viewBox=\"0 0 317.5 166.6875\" version=\"1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:svg=\"http://www.w3.org/2000/svg\"\u003e \u003cdefs\u003e \u003cstyle\u003e \u003c![CDATA[@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;700\u0026display=swap');]]\u003e .noto-sans{font-family: 'Noto Sans JP', sans-serif;} \u003c/style\u003e \u003clinearGradient x1=\"802.40997\" y1=\"636.23401\" x2=\"157.59\" y2=\"-132.23399\" gradientUnits=\"userSpaceOnUse\" spreadMethod=\"reflect\" id=\"fill\"\u003e \u003cstop offset=\"0\" stop-color=\"#265073\"/\u003e \u003cstop offset=\"0.06\" stop-color=\"#265073\"/\u003e \u003cstop offset=\"1\" stop-color=\"#9AD0C2\"/\u003e \u003c/linearGradient\u003e \u003cclipPath clipPathUnits=\"userSpaceOnUse\" id=\"clipPath\"\u003e \u003ccircle cx=\"-102.56742\" cy=\"102.00123\" style=\"stroke-width:0.246697\" r=\"52.916668\" /\u003e \u003c/clipPath\u003e \u003c/defs\u003e \u003cg transform=\"translate(27.425752,2.2446047)\"\u003e \u003cg style=\"overflow:hidden\" transform=\"matrix(0.33075834,0,0,0.33075834,-27.425752,-2.2446047)\"\u003e \u003crect x=\"0\" y=\"0\" width=\"960\" height=\"504\" fill=\"#ffffff\" /\u003e \u003crect x=\"0\" y=\"0\" width=\"960\" height=\"504\" fill=\"url(#fill)\" style=\"fill:url(#fill)\" /\u003e \u003cpath d=\"M 48,62.4088 C 48,49.4805 58.4805,39 71.4088,39 H 887.591 C 900.519,39 911,49.4805 911,62.4088 V 441.591 C 911,454.52 900.519,465 887.591,465 H 71.4088 C 58.4805,465 48,454.52 48,441.591 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"0.94902\" /\u003e \u003cg clip-path=\"url(#clip2)\"\u003e \u003cuse width=\"100%\" height=\"100%\" xlink:href=\"#img1\" transform=\"matrix(0.818182,0,0,0.818182,74,384)\" x=\"0\" y=\"0\" /\u003e \u003c/g\u003e \u003ctext class=\"noto-sans\" font-size=\"27px\" font-weight=\"300\" transform=\"translate(150.168,424)\"\u003emikiken (@mikikeen)\u003c/text\u003e \u003ctext fill=\"#7f7f7f\" class=\"noto-sans\" font-size=\"21px\" font-weight=\"300\" transform=\"translate(772.616,443)\"\u003emikiken.net\u003c/text\u003e \u003cforeignObject x=\"80\" y=\"74\" width=\"800\" height=\"500\"\u003e \u003chtml xmlns=\"http://www.w3.org/1999/xhtml\"\u003e \u003cdiv class=\"noto-sans\" style=\"font-size:48px; font-weight:700;\"\u003e {{.article_title}} \u003c/div\u003e \u003c/html\u003e \u003c/foreignObject\u003e \u003c/g\u003e \u003cimage width=\"106\" height=\"106\" preserveAspectRatio=\"none\" xlink:href=\"\u003cアイコンをbase64エンコーディングした文字列\u003e\" id=\"avatar\" x=\"-155.48409\" y=\"49.08456\" clip-path=\"url(#clipPath)\" transform=\"matrix(0.19915161,0,0,0.19915161,27.96638,114.72905)\" /\u003e \u003c/g\u003e \u003c/svg\u003e 上記のSVGファイルのうち、 \u003cforeignObject x=\"80\" y=\"74\" width=\"800\" height=\"500\"\u003e \u003chtml xmlns=\"http://www.w3.org/1999/xhtml\"\u003e \u003cdiv class=\"noto-sans\" style=\"font-size:48px; font-weight:700;\"\u003e {{.article_title}} \u003c/div\u003e \u003c/html\u003e \u003c/foreignObject\u003e の部分が、記事のタイトルを埋め込む部分です。{{.article_title}}の部分を、あとで記事のタイトルに置き換えます。 一応、ポイントとしては、 テンプレートにローカルのフォントを用いると、実行時にフォントのバイナリを手元に用意しておく必要があり面倒なので、Webフォントを使うようにした 記事のタイトルが長い場合、改行を入れたいが、SVGの仕様では要素幅に合わせて自動的にテキストを折り返す機能がないっぽい。そこで、foreignObject要素を使って、HTMLをSVGに埋め込むようにした という感じです。 ","date":"2023-12-21","objectID":"/posts/impl-ogp-image/:3:1","tags":null,"title":"自作サイト用にOGP画像を自動生成するツールを作った","uri":"/posts/impl-ogp-image/"},{"categories":null,"content":"Goでコードを書く 実装のコードを載せようかとも思ったんですが、上で言った内容をただ書いてるだけなので、割愛します。実際のコードは、以下のリポジトリにあります。 少しトリッキーなことをしている点としては、PNG画像を生成するために、ヘッドレスブラウザを起動して、スクリーンショットを撮っているところです。Webフォントを埋め込んでいるため、今回はこの方法を取っているんですが、少し大掛かり感はあります。 func convertToPng(svgContent []byte) []byte { // get svg size width, height, err := getSvgSize(svgContent) if err != nil { fmt.Println(err) } // launch headless browser page, err := rod.New().MustConnect().Page(proto.TargetCreateTarget{}) if err != nil { fmt.Println(err) } // set svg content to page if err = page.SetDocumentContent(string(svgContent)); err != nil { fmt.Println(err) } // take screenshot img, err := page.MustWaitStable().Screenshot(true, \u0026proto.PageCaptureScreenshot{ Format: proto.PageCaptureScreenshotFormatPng, Clip: \u0026proto.PageViewport{ X: 7.5, Y: 7.5, Width: float64(width), Height: float64(height), Scale: 1, }, FromSurface: true, }) if err != nil { fmt.Println(err) } return img } Goを書くのは初めてだったんですが、ChatGPTに質問しつつ1日くらいで大体書けました。 ","date":"2023-12-21","objectID":"/posts/impl-ogp-image/:3:2","tags":null,"title":"自作サイト用にOGP画像を自動生成するツールを作った","uri":"/posts/impl-ogp-image/"},{"categories":null,"content":"Hugo側でOGP画像のパスを設定する あとは、Hugoが生成するHTMLのhead要素の中に、OGPに準拠するようにmeta要素を追加します。 Hugo側でも、OGPやTwitter Cardの設定の雛形は用意されており、layouts/partials/head/meta.htmlに以下のように書くと、必要なmeta要素を生成してくれます。 {{- template \"_internal/opengraph.html\" . -}} {{- template \"_internal/twitter_cards.html\" . -}} 自分は少しカスタマイズしたかったので、以下のような記述を追加しました。 {{- template \"_internal/opengraph.html\" . -}} {{ if .Params.autoGenOgpImg }} \u003cmeta property=\"og:image\" content=\"{{ .Site.BaseURL }}images/ogp/content/{{.File.Dir}}{{.File.BaseFileName}}.png\"\u003e \u003cmeta name=\"twitter:card\" content=\"summary_large_image\"\u003e \u003c!--\u003cmeta name=\"twitter:image\" content=\"{{ .Site.BaseURL }}images/ogp/{{.File.Dir}}{{.File.BaseFileName}}.png\"\u003e--\u003e {{- else -}} \u003cmeta name=\"twitter:card\" content=\"summary\"\u003e {{- end -}} {{- /* Twitter Card Configuration */}} \u003cmeta name=\"twitter:title\" content=\"{{ .Title }}\"\u003e \u003cmeta name=\"twitter:description\" content=\"{{ with .Description }}{{ . }}{{ else }}{{if .IsPage}}{{ .Summary }}{{ else }}{{ with .Site.Params.description }}{{ . }}{{ end }}{{ end }}{{ end -}}\"\u003e {{- $twitterSite := \"\" }} {{- with site.Params.social }} {{- if reflect.IsMap . }} {{- $twitterSite = .twitter }} {{- end }} {{- else }} {{- with site.Social.twitter }} {{- $twitterSite = . }} {{- warnf \"The social key in site configuration is deprecated. Use params.social.twitter instead.\" }} {{- end }} {{- end }} {{- with $twitterSite }} {{- $content := . }} {{- if not (strings.HasPrefix . \"@\") }} {{- $content = printf \"@%v\" $twitterSite }} {{- end }} \u003cmeta name=\"twitter:site\" content=\"{{ $content }}\"\u003e {{- end }} しかし書き方をミスってるっぽく、現状うまくTwitter Cardにサムネイルが表示されない (追記) meta property=\"og:image\"と meta name=\"twitter:card\"を併記しているとTwitterでOGP画像が出ない場合があるらしく、 meta name=\"twitter:card\"を消してみたら、TwitterでもOGP画像が表示されるようになった ","date":"2023-12-21","objectID":"/posts/impl-ogp-image/:3:3","tags":null,"title":"自作サイト用にOGP画像を自動生成するツールを作った","uri":"/posts/impl-ogp-image/"},{"categories":null,"content":"使い方 $ ogp-img-generator \u003c雛形のSVGファイルのパス\u003e \u003c記事の.mdファイルのパス\u003e* みたいなコマンドを打つと、static/images/ogp/content/以下に、記事のファイルパスに対応したサムネイルのPNG画像が生成されます。 また、Gitコマンドと組み合わせて、以下のようなコマンドを実行すると、変更された記事に対してのみサムネイルを生成できます。 git add -N . \u0026\u0026 git diff --name-only | grep \\.md$ | xargs ogp-img-generator \u003c雛形のSVGファイルのパス\u003e \u0026\u0026 git reset HEAD ","date":"2023-12-21","objectID":"/posts/impl-ogp-image/:4:0","tags":null,"title":"自作サイト用にOGP画像を自動生成するツールを作った","uri":"/posts/impl-ogp-image/"},{"categories":null,"content":"今後の課題など 上の処理をCIでやるようにしたい Goで実装したので、go installするだけで実行バイナリが生成でき、割とやりやすそう ","date":"2023-12-21","objectID":"/posts/impl-ogp-image/:5:0","tags":null,"title":"自作サイト用にOGP画像を自動生成するツールを作った","uri":"/posts/impl-ogp-image/"},{"categories":null,"content":"この記事は CAMPHOR- Advent Calendar 2023 の13日目の記事です。 ","date":"2023-12-13","objectID":"/posts/td4-fpga/:0:0","tags":null,"title":"「CPUの創りかた」のTD4をFPGAで実装してみた","uri":"/posts/td4-fpga/"},{"categories":null,"content":"はじめに 「CPUの創りかた」という本をご存知でしょうか？2003年に出版された本で、汎用ロジックIC(74シリーズ)を使って、簡単な4bitのCPUを作ります。本のタイトルから、デジタル回路の話が多そうだという印象を持つかもしれませんが、LED点灯回路の抵抗値の計算といった、基本的なアナログ回路の内容から丁寧に解説されている名著です。今年で発売から20年を迎えますが、未だに根強い人気を誇っており、現在では30刷以上重版されているようです。 僕の通う大学では、3年生後期に、FPGAで何らかのデジタル回路を実装するという実験があります。そこで、この本の内容をFPGAで実装してみました。 大学の実験で「CPUの創りかた」のTD4をFPGAで実装してみた pic.twitter.com/Oqk6r73JyZ — mikiken (@mikikeen) November 6, 2023 ","date":"2023-12-13","objectID":"/posts/td4-fpga/:1:0","tags":null,"title":"「CPUの創りかた」のTD4をFPGAで実装してみた","uri":"/posts/td4-fpga/"},{"categories":null,"content":"作ったもの 「CPUの創りかた」では、TD4という4bitのCPUを段階を分けて作っていきます。 TD4の仕様をざっくり説明すると、 命令長8bit (オペコード 4bit, オペランド 4bit) 演算用のレジスタ(4bit)が2つ という感じです。 実行できる命令としては、以下の12種類があります。 ADD A, Im ADD B, Im MOV A, Im MOV B, Im MOV A, B MOV B, A JMP Im JNC Im キャリーフラグが0のとき、即値Imで指定されたアドレスにジャンプする IN A 入力端子からデータを入力し、Aレジスタに代入する IN B 入力端子からデータを入力し、Bレジスタに代入する OUT B Bレジスタの値を出力端子に出力する なお、OUT A命令は存在しない。 OUT Im 即値Imを出力端子に出力する なお、リポジトリはこれです。 あと、学校の授業で成果発表したときのスライドを一応載せときます ","date":"2023-12-13","objectID":"/posts/td4-fpga/:2:0","tags":null,"title":"「CPUの創りかた」のTD4をFPGAで実装してみた","uri":"/posts/td4-fpga/"},{"categories":null,"content":"実装方法 基本的には本に書いてある通りに実装しました。具体的には、 レジスタ ALU プログラムカウンタ 命令デコーダ ROM の順に実装しました。 なお、実装に使った(実験で渡された)FPGAボードは、PowerMedusa MU500-RXです。 三菱電機マイコン機器ソフトウエアが出しているFPGAボードで、AlteraのEP4CE30F23I7NっていうFPGAが載ってるらしい。 ほぼ本に書いてある順で実装したんですが、ROMだけ実装方針に悩んだので最後に回しました。 本だと8bitをDIPスイッチを16個並べてROMを表現しているんですが、今回使ったFPGAボードには8bitのDIPスイッチが2個しか搭載されていませんでした。 そこで、Verilogを使って、ROMの各アドレスに対して決め打ちした命令を返す素子を書き、ROMを表現することにしました。 module rom( input [3:0] address, output [7:0] data ); function [7:0] select; input [3:0] address; case (address) //Ramen timer! 4'b0000: select = 8'b10110111; // OUT 0111 4'b0001: select = 8'b00000001; // ADD A,0001 4'b0010: select = 8'b11100001; // JNC 0001 4'b0011: select = 8'b00000001; // ADD A,0001 4'b0100: select = 8'b11100011; // JNC 0011 4'b0101: select = 8'b10110110; // OUT 0110 4'b0110: select = 8'b00000001; // ADD A,0001 4'b0111: select = 8'b11100110; // JNC 0110 4'b1000: select = 8'b00000001; // ADD A,0001 4'b1001: select = 8'b11101000; // JNC 1000 4'b1010: select = 8'b10110000; // OUT 0000 4'b1011: select = 8'b10110100; // OUT 0100 4'b1100: select = 8'b00000001; // ADD 0001 4'b1101: select = 8'b11101010; // JNC 1010 4'b1110: select = 8'b10111000; // OUT 1000 4'b1111: select = 8'b11111111; // JMP 1111 default: select = 8'bxxxxxxxx; /* //LED chikachika! 4'b0000: select = 8'b10110011; // OUT 0011 4'b0001: select = 8'b10110110; // OUT 0110 4'b0010: select = 8'b10111100; // OUT 1100 4'b0011: select = 8'b10111000; // OUT 1000 4'b0100: select = 8'b10111000; // OUT 1000 4'b0101: select = 8'b10111100; // OUT 1100 4'b0110: select = 8'b10110110; // OUT 0110 4'b0111: select = 8'b10110011; // OUT 0011 4'b1000: select = 8'b10110001; // OUT 0001 4'b1001: select = 8'b11110000; // JMP 0000 4'b1010: select = 8'b00000000; 4'b1011: select = 8'b00000000; 4'b1100: select = 8'b00000000; 4'b1101: select = 8'b00000000; 4'b1110: select = 8'b00000000; 4'b1111: select = 8'b00000000; default: select = 8'bxxxxxxxx; */ endcase endfunction assign data = select(address); endmodule 今回使ったFPGAボードはQuartusが使えるので、このVerilogのコードを回路図上のコンポーネントとしてexportし、ROMを実装しました。 ","date":"2023-12-13","objectID":"/posts/td4-fpga/:3:0","tags":null,"title":"「CPUの創りかた」のTD4をFPGAで実装してみた","uri":"/posts/td4-fpga/"},{"categories":null,"content":"感想など ブラックボックスだと思っていたCPUについて、少しは理解が深まったと思います。今度はもう少し大規模なCPUをHDLで書いてみたいですね。 どうでもいいことなんですが、気軽に最初のツイートをしたところ、思ったより反響があって驚きました。やはり自作OS, 自作CPU, 自作言語は人類の三大欲求 ","date":"2023-12-13","objectID":"/posts/td4-fpga/:4:0","tags":null,"title":"「CPUの創りかた」のTD4をFPGAで実装してみた","uri":"/posts/td4-fpga/"},{"categories":null,"content":"同じ内容をZennのスクラップにも書いたんですが、こっちにも一応書いとく 本の記述に従い環境構築をしてみた ※手元の環境はUbuntu 20.04.6 LTS (WSL2) しかし、5. ブートの説明通りにrun.shを記述し実行したところ、以下のようなエラーが出た ❯ ./run.sh + QEMU=qemu-system-riscv32 + qemu-system-riscv32 -machine virt -bios default -nographic -serial mon:stdio --no-reboot qemu-system-riscv32: Unable to load the RISC-V firmware \"opensbi-riscv32-virt-fw_jump.bin\" パッと見た感じ、QEMUが-bios defaultで呼び出すファームウェアが、本の執筆当時とは変わっていそう(?) そこで、run.shを以下のように変更した #!/bin/bash set -xue # QEMUの実行バイナリへのパス QEMU=qemu-system-riscv32 # QEMUを起動 $QEMU -machine virt -bios opensbi-riscv32-generic-fw_dynamic.bin -nographic -serial mon:stdio --no-reboot すると、エラー自体は出なくなったが、QEMUを起動しても何も表示されない ❯ ./run.sh + QEMU=qemu-system-riscv32 + qemu-system-riscv32 -machine virt -bios opensbi-riscv32-generic-fw_dynamic.bin -nographic -serial mon:stdio --no-reboot そこで、以下の手順を試した aptで入れたQEMU関係のパッケージを全てアンインストール riscv-gnu-toolchainをソースコードからビルドする QEMUをソースコードからビルドする ","date":"2023-10-26","objectID":"/posts/writing-an-os-in-1000-lines-setup/:0:0","tags":null,"title":"\"Writing an OS in 1000 lines\"の環境構築をしたときのメモ","uri":"/posts/writing-an-os-in-1000-lines-setup/"},{"categories":null,"content":"aptで入れたQEMU関係のパッケージを全てアンインストール sudo apt-get remove --purge \"qemu-*\" ","date":"2023-10-26","objectID":"/posts/writing-an-os-in-1000-lines-setup/:0:1","tags":null,"title":"\"Writing an OS in 1000 lines\"の環境構築をしたときのメモ","uri":"/posts/writing-an-os-in-1000-lines-setup/"},{"categories":null,"content":"riscv-gnu-toolchainをソースコードからビルドする ビルドに必要なパッケージをインストールしておく。 sudo apt install -y texinfo bison flex libgmp-dev 環境によっては、上記以外にも足りないパッケージがあるかもしれないので、ビルド実行後にエラーが出たら適宜インストールしてから再実行する。 以下のコマンドを実行し、ソースコードからriscv-gnu-toolchainをビルドする。 cd ~ git clone --depth=1 https://github.com/riscv-collab/riscv-gnu-toolchain.git cd riscv-gnu-toolchain/ ./configure --prefix=/opt/riscv32 --with-arch=rv32i --with-abi=ilp32 sudo make ","date":"2023-10-26","objectID":"/posts/writing-an-os-in-1000-lines-setup/:0:2","tags":null,"title":"\"Writing an OS in 1000 lines\"の環境構築をしたときのメモ","uri":"/posts/writing-an-os-in-1000-lines-setup/"},{"categories":null,"content":"QEMUをソースコードからビルドする この本が書かれたのが2023年の8月頃なので、当時の安定リリースであるQEMUのv8.0系をソースコードからビルドし、インストールする。 ビルドに必要なパッケージをインストールしておく。 sudo apt install -y pkg-config ninja-build libglib2.0 libpixman-1-dev 環境によっては、上記以外にも足りないパッケージがあるかもしれないので、ビルド実行後にエラーが出たら適宜インストールしてから再実行する。 以下のコマンドを実行する。 mkdir ~/qemu \u0026\u0026 cd ~/qemu git clone --depth=1 --branch stable-8.0 https://github.com/qemu/qemu.git sudo mkdir /opt/qemu-system-riscv32 sudo ./configure --target-list=riscv32-softmmu --prefix=/opt/qemu-system-riscv32/ sudo make -j $(nproc) sudo make install ビルドが完了すると、上の--prefixで指定したパスにqemu-system-riscv32という実行バイナリが生成されているはず。そのディレクトリに対してPATHを通す。 すなわち.bashrcに以下を追加する。 export PATH=\"$PATH:/opt/qemu-system-riscv32/bin\" ","date":"2023-10-26","objectID":"/posts/writing-an-os-in-1000-lines-setup/:0:3","tags":null,"title":"\"Writing an OS in 1000 lines\"の環境構築をしたときのメモ","uri":"/posts/writing-an-os-in-1000-lines-setup/"},{"categories":null,"content":"動作確認 本の記述通りにrun.shを記述し、実行した。 ❯ ./run.sh + QEMU=qemu-system-riscv32 + qemu-system-riscv32 -machine virt -bios default -nographic -serial mon:stdio --no-reboot OpenSBI v1.2 ____ _____ ____ _____ / __ \\ / ____| _ \\_ _| | | | |_ __ ___ _ __ | (___ | |_) || | | | | | '_ \\ / _ \\ '_ \\ \\___ \\| _ \u003c | | | |__| | |_) | __/ | | |____) | |_) || |_ \\____/| .__/ \\___|_| |_|_____/|____/_____| | | |_| Platform Name : riscv-virtio,qemu Platform Features : medeleg Platform HART Count : 1 Platform IPI Device : aclint-mswi Platform Timer Device : aclint-mtimer @ 10000000Hz Platform Console Device : uart8250 Platform HSM Device : --- Platform PMU Device : --- Platform Reboot Device : sifive_test Platform Shutdown Device : sifive_test Firmware Base : 0x80000000 Firmware Size : 208 KB Runtime SBI Version : 1.0 Domain0 Name : root Domain0 Boot HART : 0 Domain0 HARTs : 0* Domain0 Region00 : 0x02000000-0x0200ffff (I) Domain0 Region01 : 0x80000000-0x8003ffff () Domain0 Region02 : 0x00000000-0xffffffff (R,W,X) Domain0 Next Address : 0x00000000 Domain0 Next Arg1 : 0x87e00000 Domain0 Next Mode : S-mode Domain0 SysReset : yes Boot HART ID : 0 Boot HART Domain : root Boot HART Priv Version : v1.12 Boot HART Base ISA : rv32imafdch Boot HART ISA Extensions : time,sstc Boot HART PMP Count : 16 Boot HART PMP Granularity : 4 Boot HART PMP Address Bits: 32 Boot HART MHPM Count : 16 Boot HART MIDELEG : 0x00001666 Boot HART MEDELEG : 0x00f0b509 ひとまず正しく動いてそう ","date":"2023-10-26","objectID":"/posts/writing-an-os-in-1000-lines-setup/:0:4","tags":null,"title":"\"Writing an OS in 1000 lines\"の環境構築をしたときのメモ","uri":"/posts/writing-an-os-in-1000-lines-setup/"},{"categories":null,"content":"ldがriscv32向けのelfを吐けない 本の5.ブートの通りにkernel.c, kernel.ldを作成し、run.shでビルドしようとすると、以下のエラーが出た ❯ ./run.sh + QEMU=qemu-system-riscv32 + CC=clang + CFLAGS='-std=c11 -O2 -g3 -Wall -Wextra --target=riscv32 -ffreestanding -nostdlib' + clang -std=c11 -O2 -g3 -Wall -Wextra --target=riscv32 -ffreestanding -nostdlib -Wl,-Tkernel.ld -Wl,-Map=kernel.map -o kernel.elf kernel.c /usr/bin/ld: unrecognised emulation mode: elf32lriscv Supported emulations: elf_x86_64 elf32_x86_64 elf_i386 elf_iamcu elf_l1om elf_k1om i386pep i386pe clang: error: ld command failed with exit code 1 (use -v to see invocation) 手元の環境のClangはリンカとしてldを呼んでいるが、ldのターゲットにriscv32がない模様 一旦以下のようにld.lldを別途呼び出すようにしたら、ビルドできるようになった (Clangが呼び出すリンカを変更できないか探ったが、よく分からなかった) #!/bin/bash set -xue # QEMUの実行バイナリへのパス QEMU=qemu-system-riscv32 CC=clang LINKER=ld.lld # コンパイルオプション CFLAGS=\"-c -std=c11 -O2 -g3 -Wall -Wextra --target=riscv32 -ffreestanding -nostdlib -mno-relax\" # カーネルをビルド $CC $CFLAGS -o kernel.o kernel.c $LINKER -m elf32lriscv -L/lib -Tkernel.ld -Map=kernel.map kernel.o -o kernel.elf # QEMUを起動 $QEMU -machine virt -bios default -nographic -serial mon:stdio --no-reboot -kernel kernel.elf ","date":"2023-10-26","objectID":"/posts/writing-an-os-in-1000-lines-setup/:0:5","tags":null,"title":"\"Writing an OS in 1000 lines\"の環境構築をしたときのメモ","uri":"/posts/writing-an-os-in-1000-lines-setup/"},{"categories":null,"content":"参考にさせていただいたサイト ","date":"2023-10-26","objectID":"/posts/writing-an-os-in-1000-lines-setup/:0:6","tags":null,"title":"\"Writing an OS in 1000 lines\"の環境構築をしたときのメモ","uri":"/posts/writing-an-os-in-1000-lines-setup/"},{"categories":null,"content":"mikiken (Kentaro Miki) ","date":"2023-08-20","objectID":"/profile/:0:0","tags":null,"title":"Profile","uri":"/profile/"},{"categories":null,"content":"About me Undergraduate student at Kobe University Department of Electrical and Electronic Engineering CAMPHOR- Core Member ","date":"2023-08-20","objectID":"/profile/:0:1","tags":null,"title":"Profile","uri":"/profile/"},{"categories":null,"content":"Interests Low-Layer programming, System Programming Language Processor Operating System Home automation ","date":"2023-08-20","objectID":"/profile/:0:2","tags":null,"title":"Profile","uri":"/profile/"},{"categories":null,"content":"Experiences Participate in Security Camp 2022 Online Development Course, C Compiler Workshop Internship at KLab Inc. (2023/08/24 ~ 2023/08/30) KLab Expert Camp 6th (TCP/IP Protocol Stack Homebrew Development #4) Internship at Turing Inc. (2023/09/11 ~ 2023/09/26) UX Engineering Team ","date":"2023-08-20","objectID":"/profile/:0:3","tags":null,"title":"Profile","uri":"/profile/"},{"categories":null,"content":"Links GitHub : mikiken Twitter : @mikikeen Misskey : @mikiken@social.camph.net Discord : mikiken SpeakerDeck : mikiken Zenn : mikiken ","date":"2023-08-20","objectID":"/profile/:0:4","tags":null,"title":"Profile","uri":"/profile/"}]